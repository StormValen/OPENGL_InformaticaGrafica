#version 330 core
out vec4 color;

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 cubeColor;

struct Material{
	sampler2D texDifuse;
	sampler2D texSpecular;
	float texShinines;
};

uniform Material material;

void main()
{
    // Ambient
    float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * lightColor * vec3(texture(material.texDifuse, TexCoords));
  	
    // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor * vec3(texture(material.texDifuse, TexCoords));
    
    // Specular
    float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.texShinines);
    vec3 specular = specularStrength * spec * lightColor * vec3(texture(material.texSpecular, TexCoords)); 
	
	float d = length(lightPos-FragPos);
	
	float Fatt = 1/(1.0+0.7*d+1.8*pow(d,2));
        
    vec3 result = (Fatt*(ambient + diffuse + specular)) * cubeColor;
    color = vec4(result, 1.0f);
} 